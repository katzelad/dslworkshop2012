import org.eclipse.swt._
import org.eclipse.swt.layout._
import org.eclipse.swt.widgets._
import org.eclipse.swt.events._
import org.tau.workshop2011.parser._
import org.tau.workshop2011.parser.AST._
import org.tau.workshop2011.expressions._
import collection.mutable.ArrayBuffer

object Main {
  /*class Box(left: Option[Int], top: Option[Int], right: Option[Int], bottom: Option[Int]) {
    def left(): Option[Int] = this.left
    def right(): Option[Int] = this.right
    def top(): Option[Int] = this.top
    def bottom(): Option[Int] = this.bottom
  }*/

  def evalExpr[T](exp: Option[Expr]) = exp match {
    case Some(value) => value match { case Literal(value: T) => Some(value) }
    case None => None
  }
  /*def evalInt(exp: Option[Expr]) = exp match {
    case Some(value) => value match { case Literal(value: Int) => Some(value) }
    case None => None
  }
  def evalString(exp: Option[Expr]) = exp match {
    case Some(value) => value match { case Literal(value: String) => Some(value) }
    case None => None
  }
  def evalBoolean(exp: Option[Expr]) = exp match {
    case Some(value) => value match { case Literal(value: Boolean) => Some(value) }
    case None => None
  }*/
  def evalNode(code: ASTNode, parent: Composite): (Option[Int], Option[Int], (Int, Int, Int, Int) => Unit) = code match {
    case AtomicWidget(kind, attributes, width, height) =>
      val widget = kind match {
        case "label" =>
          val label = new Label(parent, SWT.WRAP)
          attributes.find(_.getName == "text") match {
            case Some(a) => label setText evalExpr(a.getValue).get
            case None =>
          }
          label
        case "textbox" =>
          val textbox = new Text(parent, SWT.WRAP)
          for (name <- attributes) name.getName match {
            case "text" => textbox setText evalExpr(name getValue).get
          }
          textbox
      }
      for (name <- attributes) name.getName match {
        case "enabled" => widget setEnabled evalExpr(name getValue).get
        case "fgcolor" =>
          val color = evalExpr[Color](name getValue).get
          widget setForeground new org.eclipse.swt.graphics.Color(widget.getDisplay(), color.red, color.green, color.blue)
        case "bgcolor" =>
          val color = evalExpr[Color](name getValue).get
          widget setBackground new org.eclipse.swt.graphics.Color(widget.getDisplay(), color.red, color.green, color.blue)
        case "font" =>
          val font = evalExpr[Font](name getValue).get
          val style = font.style match {
            case TextStyle.bold => SWT.BOLD
            case TextStyle.italic => SWT.ITALIC
            case TextStyle.regular => SWT.NORMAL
          }
          widget setFont new org.eclipse.swt.graphics.Font(widget.getDisplay(), font.face, font.size, style)
      }
      val widthVal = evalExpr(width)
      val heightVal = evalExpr(height)
      (widthVal, heightVal, (left: Int, top: Int, right: Int, bottom: Int) => {
        widget setBounds (left, top, math.min(right - left, widthVal.getOrElse(Int.MaxValue)),
          math.min(bottom - top, heightVal.getOrElse(Int.MaxValue)))
        println("label", widget getBounds)
      })
    // TODO deal with vertical
    case Container(direction, children, _, _) =>
      var width = 0
      var height: Option[Int] = None
      val changeSizes = children map (child => {
        val (childWidth, childHeight, changeSize) = evalNode(child, parent)
        if (height.getOrElse(0) < childHeight.getOrElse(0))
          height = childHeight
        width += childWidth.get //TODO fix option for ?
        (changeSize, width - childWidth.get, width)
      })
      (Option(width), height, (left: Int, top: Int, right: Int, bottom: Int) => {
        for ((changeSize, leftMargin, rightMargin) <- changeSizes)
          changeSize(left + leftMargin, top, left + rightMargin, bottom)
      })
  }
  def evalCode(code: Program, window: Shell) = {
    code.defs find { case (s, w) => s == "main_window" } match {
      case Some((_, w)) =>
        val (width, height, changeSize) = evalNode(w, window)
        changeSize(0, 0, width.get, height.get)
        window.pack
      case None => println("main_window not found")
    }
  }

  def main(args: Array[String]) = {
    val display = new Display
    val shell = new Shell(display)
    val code = """main_window<-( label :50x? )[ text ="typicaltypicaltypical", enabled = false, bgcolor = 0xFF0000, font = ("arial", 14, bold)] | ( label :100x10 )[ text ="eladeladeladeladeladeladeladelad"] | ( label :20x100 )[ text ="shirshirshirshirshirshir"]
      l<-( label :? x(a+b) )
      m<-( label :20x20 )[ text =" typical "]""";
    val prog = LayoutParser iParse code;
    LayoutParser parseAll (LayoutParser.Program, code) match {
      case LayoutParser.Success(result, nextInput) => print(result) //evalCode(result, shell)
      case LayoutParser.NoSuccess(msg, nextInput) =>
        println("Could not parse the input.");
        println(msg)
    }
    shell setText "Test"

    shell.open
    while (!shell.isDisposed) {
      if (!display.readAndDispatch) {
        display.sleep
      }
    }
    display.dispose
  }
}