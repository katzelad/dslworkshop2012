import org.eclipse.swt._
import scala.List
import org.eclipse.swt.layout._
import org.eclipse.swt.widgets._
import org.eclipse.swt.events._
import org.eclipse.swt.graphics.Image
import org.tau.workshop2011.parser._
import org.tau.workshop2011.parser.AST._
import org.tau.workshop2011.expressions._
import collection.mutable.ArrayBuffer

object Main {

  val SASH_WIDTH = 5

  def evalExpr[T](exp: Option[Expr]) = exp match {
    case Some(value) => value match { case Literal(value: T) => Some(value) }
    case None => None
  }
  def evalNode(code: ASTNode, parent: Composite): (Option[Int], Option[Int], (Int, Int, Int, Int) => Unit) = code match {
    case AtomicWidget(kind, attributes, width, height) =>
      var hAlign = 0
      var text = ""
      var checked = false
      //TODO change image location
      var image = "E:/error.jpg"
      var minValue, maxValue = 0
      var value: Option[Int] = None
      var changeImageSize = (width: Int, height: Int) => {}
      for (att <- attributes) att.getName match {
        case "halign" => hAlign = evalExpr[HAlign](att getValue).get match {
          case HAlign.left => SWT.LEFT
          case HAlign.center => SWT.CENTER
          case HAlign.right => SWT.RIGHT
        }
        case "text" => text = evalExpr(att getValue).get
        case "checked" => checked = evalExpr(att getValue).get
        case "image" => image = evalExpr(att getValue).get
        case "value" => value = evalExpr(att getValue)
        case "maxvalue" => maxValue = evalExpr(att getValue).get
        case "minvalue" => minValue = evalExpr(att getValue).get
        case _ =>
      }
      val widget = kind match {
        case "label" | "" =>
          val label = new Label(parent, SWT.WRAP | hAlign)
          label setText text
          label
        case "textbox" =>
          val textbox = new Text(parent, SWT.WRAP | hAlign)
          textbox setText text
          textbox
        case "button" =>
          val button = new Button(parent, SWT.PUSH | SWT.WRAP | hAlign)
          button setText text
          button
        case "checkbox" =>
          val checkbox = new Button(parent, SWT.CHECK) //TODO see if it's 0/1 or true/false
          checkbox.setSelection(checked)
          checkbox
        case "radio" =>
          val radio = new Button(parent, SWT.RADIO)
          radio.setSelection(checked)
          radio
        case "image" =>
          val label = new Label(parent, SWT.NONE)
          label setImage new Image(label.getDisplay(), image)
          changeImageSize = (width, height) => {
            val prevImage = label.getImage
            label setImage new Image(label.getDisplay(), prevImage.getImageData().scaledTo(width, height))
            prevImage dispose
          }
          label
        case "combo" =>
          val combo = new Combo(parent, SWT.DROP_DOWN | SWT.READ_ONLY)
          combo setItems text.split(",")
          value match {
            case Some(v) => combo select v
            case None =>
          }
          combo
        case "slider" =>
          val slider = new Slider(parent, SWT.HORIZONTAL)
          slider setMaximum maxValue
          slider setMinimum minValue
          slider setSelection value.getOrElse(0)
          slider
      }
      for (att <- attributes) att.getName match {
        case "enabled" => widget setEnabled evalExpr(att getValue).get
        case "fgcolor" =>
          val color = evalExpr[Color](att getValue).get
          widget setForeground new org.eclipse.swt.graphics.Color(widget.getDisplay(), color.red, color.green, color.blue)
        case "bgcolor" =>
          val color = evalExpr[Color](att getValue).get
          widget setBackground new org.eclipse.swt.graphics.Color(widget.getDisplay(), color.red, color.green, color.blue)
        case "font" =>
          val font = evalExpr[Font](att getValue).get
          val style = font.style match {
            case TextStyle.bold => SWT.BOLD
            case TextStyle.italic => SWT.ITALIC
            case TextStyle.regular => SWT.NORMAL
          }
          widget setFont new org.eclipse.swt.graphics.Font(widget.getDisplay(), font.face, font.size, style)
        case _ =>
      }
      val widthVal = evalExpr(width)
      val heightVal = evalExpr(height)
      (widthVal, heightVal, (left: Int, top: Int, right: Int, bottom: Int) => {
        widget setBounds (left, top, math.min(right - left, widthVal.getOrElse(Int.MaxValue)),
          math.min(bottom - top, heightVal.getOrElse(Int.MaxValue)))
        changeImageSize(widget.getSize.x, widget.getSize.y)
        println(widget, widget.getBounds)
      })
    // TODO deal with vertical
    case Container(direction, children, _, _) =>
      var seenQM = 0
      var sashes = List[Sash]()
      val childInfo = children map (evalNode(_, parent))
      val qms = childInfo count { case (w, _, _) => w.isEmpty } // total number of question marks (qms)
      val numWidth = childInfo map { case (w, _, _) => w.getOrElse(0) } sum
      var sashMap = scala.collection.mutable.Map[Sash, Double]()
      var constSashMap = Map[Sash, (Option[Sash], Int)]()
      var changeSizes = List[((Int, Int, Int, Int) => Unit, Option[Sash], Option[Int], Option[Sash], Option[Int], Option[Int])]()
      var j = 0
      for (i <- 0 to childInfo.length - 1) {
        childInfo(i) match { //i is the right mark
          case (None, _, qmChangeSize) =>
            if (seenQM > 0) { // ... ? ... ? ...
              val leftSash = new Sash(parent, SWT.VERTICAL | SWT.SMOOTH)
              childInfo(j) match {
                case (None, _, changeSize) =>
                  changeSizes ::= (changeSize, if (sashes isEmpty) None else Some(sashes last),
                    if (sashes isEmpty)
                      Some(childInfo take (childInfo prefixLength { case (w, _, _) => w.isDefined })
                      map ({ case (Some(w), _, _) => w; case _ => print("Error: 134"); 0 }) sum)
                    else
                      Some(0), Some(leftSash), Some(0), None)
              }
              constSashMap += leftSash -> (if (sashes.isEmpty) None else Some(sashes.last),
                if (sashes.isEmpty)
                  childInfo takeWhile { case (w, _, _) => w.isDefined } map { case (Some(w), _, _) => w; case _ => print("Error: 143"); 0 } sum
                else 0)
              sashMap(leftSash) = 1.0 / qms
              sashes ::= leftSash
              if (i > j + 1) { // ... ? 20 20 20 ? ...
                val rightSash = new Sash(parent, SWT.VERTICAL | SWT.SMOOTH)
                sashes ::= rightSash
                var accWidth = 0
                for (j <- j + 1 to i - 1)
                  childInfo(j) match {
                    case (Some(width), _, changeSize) =>
                      changeSizes ::= (changeSize, Some(leftSash), Some(accWidth), None, None, Some(width))
                      accWidth += width
                    case _ => print("Error: 148")
                  }
                constSashMap += rightSash -> (Some(leftSash), accWidth)
                sashMap(rightSash) = 0
              }
            } else { // 20 20 ? ...
              var accWidth = 0
              for (j <- 0 to i - 1) {
                childInfo(j) match {
                  case (Some(width), _, changeSize) =>
                    changeSizes ::= (changeSize, None, Some(accWidth), None, None, Some(width))
                    accWidth += width
                  case _ => print("Error: 158")
                }
              }
            }
            j = i
            seenQM += 1
          case (Some(width), _, _) =>
            if (j == 0 && i == childInfo.length - 1) { // 20 20 20
              var accWidth = 0
              for (j <- 0 to i)
                childInfo(j) match {
                  case (Some(width), _, changeSize) =>
                    changeSizes ::= (changeSize, None, Some(accWidth), None, None, Some(width))
                    accWidth += width
                  case _ => print("Error: 172")
                }
            } else if (i == childInfo.length - 1) { // ... ? 20 20
              var accWidth = 0
              for (j <- i to j + 1 by -1)
                childInfo(j) match {
                  case (Some(width), _, changeSize) =>
                    changeSizes ::= (changeSize, None, None, None, Some(accWidth), Some(width))
                    accWidth += width
                  case _ => print("Error: 181")
                }
              childInfo(j) match {
                case (None, _, changeSize) =>
                  if (seenQM > 1)
                    changeSizes ::= (changeSize, Some(sashes.last), Some(0), None, Some(accWidth), None)
                  else
                    changeSizes ::= (changeSize, None, Some(numWidth - accWidth), None, Some(accWidth), None)
              }
            }
        }
      }
      val totalWidth = numWidth + sashes.length * SASH_WIDTH
      val height = ((childInfo map { case (_, h, _) => h }) fold None) {
        case (Some(h1), Some(h2)) => Some(math.max(h1, h2))
        case (Some(h), None) => Some(h)
        case (None, Some(h)) => Some(h)
        case (None, None) => None
      }
      (if (seenQM > 0) None else Some(totalWidth), height, (left: Int, top: Int, right: Int, bottom: Int) => {
        sashes foreach (sash => {
          val (prevSash, constMargin) = constSashMap(sash)
          val leftMargin = (prevSash map (s => s.getBounds.x + s.getBounds.width) getOrElse 0) + constMargin + sashMap(sash)
          sash.setBounds((left + (right - left) * sashMap(sash)).toInt, top,
            (left + (right - left) * sashMap(sash) + SASH_WIDTH).toInt, bottom)
          println("sash", sash.getBounds)
        })
        changeSizes foreach {
          case (changeSize, Some(leftSash), Some(leftMargin), None, None, Some(width)) =>
            changeSize(leftSash.getBounds.x + leftSash.getBounds.width + leftMargin, top,
              leftSash.getBounds.x + leftSash.getBounds.width + leftMargin + width, bottom)
          case (changeSize, Some(leftSash), Some(leftMargin), Some(rightSash), Some(rightMargin), None) =>
            changeSize(leftSash.getBounds.x + leftSash.getBounds.width + leftMargin, top,
              rightSash.getBounds.x - rightMargin, bottom)
          case (changeSize, None, Some(leftMargin), Some(rightSash), Some(rightMargin), None) =>
            changeSize(left + leftMargin, top, rightSash.getBounds.x - rightMargin, bottom)
          case (changeSize, None, Some(leftMargin), None, None, Some(width)) =>
            changeSize(left + leftMargin, top, left + leftMargin + width, bottom)
          case (changeSize, None, None, None, Some(rightMargin), Some(width)) =>
            changeSize(right - rightMargin - width, top, right - rightMargin, bottom)
          case (changeSize, Some(leftSash), Some(leftMargin), None, Some(rightMargin), None) =>
            changeSize(leftSash.getBounds.x + leftSash.getBounds.width + leftMargin, top, right - rightMargin, bottom)
          case (changeSize, None, Some(leftMargin), None, Some(rightMargin), None) =>
            changeSize(left + leftMargin, top, right - rightMargin, bottom)
          case _ => print("Error: 217")
        }
      })
  }
  def evalCode(code: Program, window: Shell) = {
    code.defs find { case (s, w) => s == "main_window" } match {
      case Some((_, w)) =>
        val (width, height, changeSize) = evalNode(w, window)
        window.setSize(800, 200)
        changeSize(0, 0, window.getSize.x, window.getSize.y)
      case None => println("main_window not found")
    }
  }

  def main(args: Array[String]) = {
    val display = new Display
    val shell = new Shell(display)
    val code = """main_window<-( label :50x? )[ text ="typicaltypicaltypical", enabled = true, bgcolor = 0x0000FF, fgcolor = 0xFF0000, font = ("times new roman", 14, bold), halign = left] |
      ( textbox :50x70 )[ text ="eladeladeladeladeladeladeladelad", enabled = false, bgcolor = 0x0000FF, fgcolor = 0x00FF00, font = ("times new roman", 12, italic), halign = center] |
      ( button :?x100 )[ text ="shirshirshirshirshirshir", enabled = false, bgcolor = 0x00FFFF, fgcolor = 0x008F8F, font = ("times new roman", 16, italic), halign = center] |
      ( checkbox :?x70 )[enabled = true, bgcolor = 0x0000FF, fgcolor = 0x00FF00, checked = true] |
      ( radio :60x70 )[enabled = true, bgcolor = 0x00AAFF, fgcolor = 0xAAFF00, checked = false] |
      ( radio :60x70 )[enabled = true, bgcolor = 0x00AAFF, fgcolor = 0xAAFF00, checked = true] |
      ( image :50x? )[enabled = true, bgcolor = 0x00AAFF, fgcolor = 0xAAFF00 ] |
      ( slider :100x50 )[enabled = true, bgcolor = 0x00CADF, fgcolor = 0x7ABF00, maxvalue=300, minvalue =1 , value=50] |
      ( combo :100x? )[text = "a,b,c",enabled = false, bgcolor = 0x00CADF, fgcolor = 0x7ABF00]
      l<-( label :? x(a+b) )
      m<-( label :20x20 )[ text =" typical "]""";
    val prog = LayoutParser iParse code;
    LayoutParser parseAll (LayoutParser.Program, code) match {
      case LayoutParser.Success(result, nextInput) => evalCode(result, shell) //print(result)
      case LayoutParser.NoSuccess(msg, nextInput) =>
        println("Could not parse the input.");
        println(msg)
    }
    shell setText "Test"

    shell.open
    while (!shell.isDisposed) {
      if (!display.readAndDispatch) {
        display.sleep
      }
    }
    display.dispose
  }
}